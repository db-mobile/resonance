openapi: 3.0.0
info:
    version: 1.0.0
    contact:
        name: Spryker
        url: 'https://support.spryker.com/'
        email: support@spryker.com
    title: 'Spryker API'
    license:
        name: MIT
tags:
    -
        name: abstract-product-availabilities
    -
        name: abstract-product-image-sets
    -
        name: abstract-product-prices
    -
        name: abstract-products
    -
        name: access-tokens
    -
        name: addresses
    -
        name: agent-access-tokens
    -
        name: agent-customer-impersonation-access-tokens
    -
        name: agent-customer-search
    -
        name: cart-codes
    -
        name: carts
    -
        name: catalog-search
    -
        name: catalog-search-suggestions
    -
        name: category-nodes
    -
        name: category-trees
    -
        name: checkout
    -
        name: checkout-data
    -
        name: cms-pages
    -
        name: companies
    -
        name: company-business-unit-addresses
    -
        name: company-business-units
    -
        name: company-roles
    -
        name: company-user-access-tokens
    -
        name: company-users
    -
        name: concrete-product-availabilities
    -
        name: concrete-product-image-sets
    -
        name: concrete-product-prices
    -
        name: concrete-products
    -
        name: customer-access
    -
        name: customer-confirmation
    -
        name: customer-forgotten-password
    -
        name: customer-password
    -
        name: customer-restore-password
    -
        name: customers
    -
        name: health-check
    -
        name: items
    -
        name: navigations
    -
        name: order-payments
    -
        name: orders
    -
        name: product-management-attributes
    -
        name: product-measurement-units
    -
        name: product-tax-sets
    -
        name: refresh-tokens
    -
        name: related-products
    -
        name: sales-units
    -
        name: shared-carts
    -
        name: shopping-list-items
    -
        name: shopping-lists
    -
        name: stores
    -
        name: tire-search
    -
        name: token
    -
        name: url-resolver
    -
        name: vouchers
    -
        name: wishlist-items
    -
        name: wishlists
servers:
    -
        url: 'http://glue.esa.local'
paths:
    '/concrete-products/{concreteProductId}':
        get:
            summary: 'Retrieves product concrete by id.'
            tags:
                - concrete-products
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-concrete-products
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConcreteProductsRestResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Concrete product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /access-tokens:
        post:
            summary: 'Creates access token for user.'
            tags:
                - access-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAccessTokensRequest'
            operationId: create-access-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponseResponse'
                400:
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /refresh-tokens:
        post:
            summary: 'Refreshes customer''s auth token.'
            tags:
                - refresh-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestRefreshTokensRequest'
            operationId: create-refresh-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponseResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/refresh-tokens/{refreshTokenId}':
        delete:
            summary: 'Revokes customer''s refresh token.'
            tags:
                - refresh-tokens
            parameters:
                -
                    name: refreshTokenId
                    in: path
                    required: true
                    description: 'Id of refresh token.'
                    schema:
                        type: string
                -
                    name: Accept-Language
                    in: header
                    required: false
                    description: 'Locale value relevant for the store.'
                    schema:
                        type: string
            security:
                -
                    BearerAuth: []
            operationId: delete-refresh-tokens
            responses:
                204:
                    description: 'No content.'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/company-users/{companyUserId}':
        get:
            summary: 'Retrieves a company user by id.'
            tags:
                - company-users
            parameters:
                -
                    name: companyUserId
                    in: path
                    required: true
                    description: 'Id of company user.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-company-users
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyUserResponse'
                404:
                    description: 'Company user not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /company-users:
        get:
            summary: 'Retrieves list of company users.'
            tags:
                - company-users
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-company-users
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyUserCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /company-user-access-tokens:
        post:
            summary: 'Creates access token for company user.'
            tags:
                - company-user-access-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCompanyUserAccessTokensRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-company-user-access-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyUserAccessTokenResponseResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customers/{customerId}':
        get:
            summary: 'Retrieves customer data.'
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Customer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        patch:
            summary: 'Updates customer data.'
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomersRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Failed to save customer.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Customer with this email already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Anonymizes customers.'
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-customers
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Customer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /customers:
        get:
            summary: 'Retrieves customers collection.'
            tags:
                - customers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        post:
            summary: 'Creates customer.'
            tags:
                - customers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomersRequest'
            operationId: create-customers
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Terms and Conditions was not accepted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Customer with this email already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customers/{customerId}/addresses/{addressId}':
        get:
            summary: 'Retrieves customer address by id.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    name: addressId
                    in: path
                    required: true
                    description: 'Id of address.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-customers-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAddressResponse'
                404:
                    description: 'Address not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        patch:
            summary: 'Updates customer address.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    name: addressId
                    in: path
                    required: true
                    description: 'Id of address.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAddressRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-customers-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAddressResponse'
                400:
                    description: 'Address id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Deletes customer address.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    name: addressId
                    in: path
                    required: true
                    description: 'Id of address.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-customers-addresses
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Address id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Address not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customers/{customerId}/addresses':
        get:
            summary: 'Retrieves list of all customer addresses.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAddressCollectionResponse'
                400:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Address not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        post:
            summary: 'Creates customer address.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAddressRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-customers-addresses
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAddressResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /customer-forgotten-password:
        post:
            summary: 'Sends password restoration email.'
            tags:
                - customer-forgotten-password
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerForgottenPasswordRequest'
            operationId: create-customer-forgotten-password
            responses:
                204:
                    description: 'No content.'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customer-restore-password/{customerRestorePasswordId}':
        patch:
            summary: 'Restores customer password.'
            tags:
                - customer-restore-password
            parameters:
                -
                    name: customerRestorePasswordId
                    in: path
                    required: true
                    description: 'Id of customer restore password.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerRestorePasswordRequest'
            operationId: update-customer-restore-password
            responses:
                204:
                    description: 'No content.'
                400:
                    description: 'Customer restore password id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Restore password key is not valid.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customer-password/{customerPasswordId}':
        patch:
            summary: 'Updates customer password.'
            tags:
                - customer-password
            parameters:
                -
                    name: customerPasswordId
                    in: path
                    required: true
                    description: 'Id of customer password.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerPasswordRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-customer-password
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Passwords don''t match.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Customer unauthorized.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                406:
                    description: 'Invalid password.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/companies/{companyId}':
        get:
            summary: 'Retrieves a company by id.'
            tags:
                - companies
            parameters:
                -
                    name: companyId
                    in: path
                    required: true
                    description: 'Id of company.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-companies
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyResponse'
                400:
                    description: 'Company id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Company not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /companies:
        get:
            summary: 'Retrieves company collection.'
            tags:
                - companies
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-companies
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyCollectionResponse'
                501:
                    description: 'Not implemented.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}/abstract-product-prices':
        get:
            summary: 'Retrieves abstract product prices.'
            tags:
                - abstract-product-prices
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-abstract-products-abstract-product-prices
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductPricesCollectionResponse'
                400:
                    description: 'Abstract product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product prices not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/concrete-products/{concreteProductId}/concrete-product-prices':
        get:
            summary: 'Retrieves concrete product prices.'
            tags:
                - concrete-product-prices
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-prices
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductPricesCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Concrete product prices not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}':
        get:
            summary: 'Retrieves product abstract by id.'
            tags:
                - abstract-products
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-abstract-products
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AbstractProductsRestResponse'
                400:
                    description: 'Abstract product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}/abstract-product-availabilities':
        get:
            summary: 'Retrieves abstract product availabilities.'
            tags:
                - abstract-product-availabilities
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-abstract-products-abstract-product-availabilities
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponse'
                400:
                    description: 'Abstract product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product availability not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/concrete-products/{concreteProductId}/concrete-product-availabilities':
        get:
            summary: 'Retrieves concrete product availabilities.'
            tags:
                - concrete-product-availabilities
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-availabilities
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Concrete product availability not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}/related-products':
        get:
            summary: 'Retrieves list of all related products of abstract product.'
            tags:
                - related-products
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-abstract-products-related-products
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AbstractProductsRestCollectionResponse'
                400:
                    description: 'Abstract product sku is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}':
        get:
            summary: 'Retrieves a cart by id.'
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        patch:
            summary: 'Updates a cart.'
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Can’t switch price mode when there are items in the cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Deletes cart by id.'
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart could not be deleted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /carts:
        get:
            summary: 'Retrieves list of all customer''s carts.'
            tags:
                - carts
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-carts
            deprecated: true
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        post:
            summary: 'Creates a cart.'
            tags:
                - carts
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Customer already has a cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}/abstract-product-image-sets':
        get:
            summary: 'Retrieves abstract product image sets.'
            tags:
                - abstract-product-image-sets
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-abstract-products-abstract-product-image-sets
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductImageSetsCollectionResponse'
                400:
                    description: 'Abstract product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product image sets not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/concrete-products/{concreteProductId}/concrete-product-image-sets':
        get:
            summary: 'Retrieves concrete product image sets.'
            tags:
                - concrete-product-image-sets
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-image-sets
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductImageSetsCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Concrete product image sets not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/items':
        post:
            summary: 'Adds an item to the cart.'
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-items
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Errors appeared during item creation.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/items/{itemId}':
        patch:
            summary: 'Updates cart item quantity.'
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: itemId
                    in: path
                    required: true
                    description: 'Id of item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-carts-items
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id or item id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart or item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Errors appeared during item update.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Removes item from the cart.'
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: itemId
                    in: path
                    required: true
                    description: 'Id of item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-items
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Cart id or item id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart or cart item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart item could not be deleted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /catalog-search:
        get:
            summary: 'Catalog search.'
            tags:
                - catalog-search
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
            operationId: get-collection-of-catalog-search
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCatalogSearchCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /catalog-search-suggestions:
        get:
            summary: 'Catalog search suggestions.'
            tags:
                - catalog-search-suggestions
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
            operationId: get-collection-of-catalog-search-suggestions
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCatalogSearchSuggestionsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/stores/{storeId}':
        get:
            summary: 'Retrieves current store data.'
            tags:
                - stores
            parameters:
                -
                    name: storeId
                    in: path
                    required: true
                    description: 'Id of store.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-stores
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StoresRestResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /stores:
        get:
            summary: 'Retrieves current store data in case of Dynamic Store is off and all stores - if the Dynamic Store is on.'
            tags:
                - stores
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-stores
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StoresRestCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /category-trees:
        get:
            summary: 'Retrieves category tree for specified locale.'
            tags:
                - category-trees
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-category-trees
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCategoryTreesCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/category-nodes/{categoryNodeId}':
        get:
            summary: 'Retrieves a category node by id.'
            tags:
                - category-nodes
            parameters:
                -
                    name: categoryNodeId
                    in: path
                    required: true
                    description: 'Id of category node.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-category-nodes
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCategoryNodesResponse'
                400:
                    description: 'Category node id has not been specified or invalid.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Category node not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/orders/{orderId}':
        get:
            summary: 'Retrieves order by id.'
            tags:
                - orders
            parameters:
                -
                    name: orderId
                    in: path
                    required: true
                    description: 'Id of order.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-orders
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrderDetailsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Order not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /orders:
        get:
            summary: 'Retrieves list of orders.'
            tags:
                - orders
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-orders
            deprecated: true
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrdersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /checkout-data:
        post:
            summary: |-
                Provides checkout data
                 - available addresses
                 - shipment methods
                 - payment methods
            tags:
                - checkout-data
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: X-Anonymous-Customer-Unique-Id
                    in: header
                    required: false
                    description: 'Guest customer unique ID.'
                    schema:
                        type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCheckoutRequestRequest'
            operationId: create-checkout-data
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCheckoutDataResponseResponse'
                400:
                    description: 'Bad Response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /checkout:
        post:
            summary: 'Places order.'
            tags:
                - checkout
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: X-Anonymous-Customer-Unique-Id
                    in: header
                    required: false
                    description: 'Guest customer unique ID.'
                    schema:
                        type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCheckoutRequestRequest'
            operationId: create-checkout
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCheckoutResponseResponse'
                400:
                    description: 'Bad Response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/navigations/{navigationId}':
        get:
            summary: 'Retrieves a navigation by id.'
            tags:
                - navigations
            parameters:
                -
                    name: navigationId
                    in: path
                    required: true
                    description: 'Id of navigation.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-navigations
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestNavigationResponse'
                400:
                    description: 'Navigation id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Navigation not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/company-business-units/{companyBusinessUnitId}':
        get:
            summary: 'Retrieves a company business unit by id.'
            tags:
                - company-business-units
            parameters:
                -
                    name: companyBusinessUnitId
                    in: path
                    required: true
                    description: 'Id of company business unit.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-company-business-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyBusinessUnitResponse'
                400:
                    description: 'Company business unit id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Company business unit not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /company-business-units:
        get:
            summary: 'Retrieves company business units collection.'
            tags:
                - company-business-units
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-company-business-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponse'
                501:
                    description: 'Not implemented.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/company-business-unit-addresses/{companyBusinessUnitAddressId}':
        get:
            summary: 'Retrieves a company business unit address by id.'
            tags:
                - company-business-unit-addresses
            parameters:
                -
                    name: companyBusinessUnitAddressId
                    in: path
                    required: true
                    description: 'Id of company business unit address.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-company-business-unit-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesResponse'
                400:
                    description: 'Company business unit address id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Company business unit address not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /company-business-unit-addresses:
        get:
            summary: 'Retrieves company business unit addresses collection.'
            tags:
                - company-business-unit-addresses
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-company-business-unit-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponse'
                501:
                    description: 'Not implemented.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/company-roles/{companyRoleId}':
        get:
            summary: 'Retrieves a company role by id.'
            tags:
                - company-roles
            parameters:
                -
                    name: companyRoleId
                    in: path
                    required: true
                    description: 'Id of company role.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-company-roles
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyRoleResponse'
                400:
                    description: 'Company role id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Company role not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /company-roles:
        get:
            summary: 'Retrieves company role collection.'
            tags:
                - company-roles
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-company-roles
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCompanyRoleCollectionResponse'
                501:
                    description: 'Not implemented.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/abstract-products/{abstractProductId}/product-tax-sets':
        get:
            summary: 'Retrieves abstract product tax sets.'
            tags:
                - product-tax-sets
            parameters:
                -
                    name: abstractProductId
                    in: path
                    required: true
                    description: 'Id of abstract product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-abstract-products-product-tax-sets
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductTaxSetsCollectionResponse'
                400:
                    description: 'Abstract product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Abstract product tax sets not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /order-payments:
        post:
            summary: 'Updates order payment.'
            tags:
                - order-payments
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestOrderPaymentsRequest'
            operationId: create-order-payments
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrderPaymentsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/shared-carts':
        post:
            summary: 'Shares a cart.'
            tags:
                - shared-carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestSharedCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-shared-carts
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSharedCartsResponse'
                400:
                    description: 'Cart id is missing'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart or company user not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Failed to share a cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/shared-carts/{sharedCartId}':
        patch:
            summary: 'Updates permission group for shared cart.'
            tags:
                - shared-carts
            parameters:
                -
                    name: sharedCartId
                    in: path
                    required: true
                    description: 'Id of shared cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestSharedCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-carts-shared-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSharedCartsResponse'
                400:
                    description: 'Shared cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shared cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Deletes cart sharing.'
            tags:
                - shared-carts
            parameters:
                -
                    name: sharedCartId
                    in: path
                    required: true
                    description: 'Id of shared cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-shared-carts
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Shared cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shared cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /url-resolver:
        get:
            summary: 'Retrieves collection of urls by the `url` parameter provided in GET request.'
            tags:
                - url-resolver
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: url
                    in: query
                    required: true
                    description: 'URL to resolve.'
                    schema:
                        type: string
            operationId: get-collection-of-url-resolver
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestUrlResolverCollectionResponse'
                404:
                    description: 'Not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/vouchers':
        post:
            summary: 'Applies a discount voucher code to a cart.'
            tags:
                - vouchers
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestDiscountsRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-vouchers
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestDiscountsRequestResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart code can''t be added.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/vouchers/{voucherCode}':
        delete:
            summary: 'Deletes a discount voucher code from a cart.'
            tags:
                - vouchers
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: voucherCode
                    in: path
                    required: true
                    description: 'Id of voucher.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-vouchers
            responses:
                204:
                    description: 'Expected response to a valid request.'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart code not found in cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /customer-access:
        get:
            summary: 'Retrieves collection of restricted resources.'
            tags:
                - customer-access
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-customer-access
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomerAccessCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/health-check/{healthCheckId}':
        get:
            summary: 'Retrieve services status.'
            tags:
                - health-check
            parameters:
                -
                    name: healthCheckId
                    in: path
                    required: true
                    description: 'Id of health check.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-health-check
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestHealthCheckResponseResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Services are disabled.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                503:
                    description: 'Services are unavailable.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/shopping-lists/{shoppingListId}':
        get:
            summary: 'Retrieves a shopping list by id.'
            tags:
                - shopping-lists
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-shopping-lists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shopping list is not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        patch:
            summary: 'Updates a shopping list by id.'
            tags:
                - shopping-lists
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestShoppingListRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-shopping-lists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListsResponse'
                400:
                    description: 'Shopping list id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shopping list not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot patch a shopping list.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Deletes a shopping list by id.'
            tags:
                - shopping-lists
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-shopping-lists
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Shopping list id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shopping list not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /shopping-lists:
        get:
            summary: 'Retrieves list of all customer''s shopping lists.'
            tags:
                - shopping-lists
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-shopping-lists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListsCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        post:
            summary: 'Creates a shopping list.'
            tags:
                - shopping-lists
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestShoppingListRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-shopping-lists
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot create a shopping list.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/shopping-lists/{shoppingListId}/shopping-list-items':
        post:
            summary: 'Adds a shopping list item.'
            tags:
                - shopping-list-items
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestShoppingListItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-shopping-lists-shopping-list-items
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListItemsResponse'
                400:
                    description: 'Shopping list id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shopping list not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot add an item to shopping list'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/shopping-lists/{shoppingListId}/shopping-list-items/{shoppingListItemId}':
        patch:
            summary: 'Updates the shopping list item.'
            tags:
                - shopping-list-items
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    name: shoppingListItemId
                    in: path
                    required: true
                    description: 'Id of shopping list item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestShoppingListItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-shopping-lists-shopping-list-items
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestShoppingListItemsResponse'
                400:
                    description: 'Shopping list id or shopping list item id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Shopping list or list item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot update the shopping list item'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Deletes the shopping list item.'
            tags:
                - shopping-list-items
            parameters:
                -
                    name: shoppingListId
                    in: path
                    required: true
                    description: 'Id of shopping list.'
                    schema:
                        type: string
                -
                    name: shoppingListItemId
                    in: path
                    required: true
                    description: 'Id of shopping list item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-shopping-lists-shopping-list-items
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Shopping list id or shopping list item id not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Not Found'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot delete the shopping list item'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/product-measurement-units/{productMeasurementUnitId}':
        get:
            summary: 'Retrieves product measurement unit by code.'
            tags:
                - product-measurement-units
            parameters:
                -
                    name: productMeasurementUnitId
                    in: path
                    required: true
                    description: 'Id of product measurement unit.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-product-measurement-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductMeasurementUnitsResponse'
                400:
                    description: 'Resource id has not been specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Product measurement unit not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/concrete-products/{concreteProductId}/sales-units':
        get:
            summary: 'Retrieves a collection of sales units.'
            tags:
                - sales-units
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-sales-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSalesUnitsCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Concrete product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/cms-pages/{cmPageId}':
        get:
            summary: 'Retrieves a cms page by uuid.'
            tags:
                - cms-pages
            parameters:
                -
                    name: cmPageId
                    in: path
                    required: true
                    description: 'Id of cm page.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-cms-pages
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCmsPagesResponse'
                404:
                    description: 'Cms page not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /cms-pages:
        get:
            summary: 'Retrieves list of cms pages.'
            tags:
                - cms-pages
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
            operationId: get-collection-of-cms-pages
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCmsPagesCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /agent-access-tokens:
        post:
            summary: 'Creates agent''s access token.'
            tags:
                - agent-access-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAgentAccessTokensRequestRequest'
            operationId: create-agent-access-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAgentAccessTokensResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /agent-customer-impersonation-access-tokens:
        post:
            summary: 'Creates customer imprsonation access token.'
            tags:
                - agent-customer-impersonation-access-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensRequestRequest'
            operationId: create-agent-customer-impersonation-access-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                401:
                    description: 'Action is available to agent user only.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /agent-customer-search:
        get:
            summary: 'Retrieves customer list by query provided in GET parameteres.'
            tags:
                - agent-customer-search
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
            operationId: get-collection-of-agent-customer-search
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestAgentCustomerSearchCollectionResponse'
                401:
                    description: 'Action is available to agent user only.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/product-management-attributes/{productManagementAttributeId}':
        get:
            summary: 'Retrieves attribute by id.'
            tags:
                - product-management-attributes
            parameters:
                -
                    name: productManagementAttributeId
                    in: path
                    required: true
                    description: 'Id of product management attribute.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-product-management-attributes
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductManagementAttributeResponse'
                404:
                    description: 'Attribute not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /product-management-attributes:
        get:
            summary: 'Retrieves list of attributes.'
            tags:
                - product-management-attributes
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-product-management-attributes
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductManagementAttributeCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /customer-confirmation:
        post:
            summary: 'Confirms customer registration.'
            tags:
                - customer-confirmation
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerConfirmationRequest'
            operationId: create-customer-confirmation
            responses:
                204:
                    description: 'No content.'
                422:
                    description: 'This email confirmation code is invalid or has been already used.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /token:
        post:
            summary: 'Create token.'
            tags:
                - token
            operationId: create-token
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customers/{customerId}/carts':
        get:
            summary: 'Retrieves list of carts.'
            tags:
                - carts
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/customers/{customerId}/orders':
        get:
            summary: 'Retrieves list of orders.'
            tags:
                - orders
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-orders
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrdersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/cart-codes':
        post:
            summary: 'Applies a gift card code to a cart'
            tags:
                - cart-codes
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartCodeRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-cart-codes
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart code can''t be added.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/carts/{cartId}/cart-codes/{cartCodeId}':
        delete:
            summary: 'Deletes a gift card code from a cart.'
            tags:
                - cart-codes
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: cartCodeId
                    in: path
                    required: true
                    description: 'Id of cart code.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-cart-codes
            responses:
                204:
                    description: 'Expected response to a valid request.'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cart code can''t be removed.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/wishlists/{wishlistId}':
        get:
            summary: 'Retrieves wishlist data by id.'
            tags:
                - wishlists
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-wishlists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistsResponse'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        patch:
            summary: 'Updates customer wishlist.'
            tags:
                - wishlists
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestWishlistsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-wishlists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistsResponse'
                400:
                    description: 'A wishlist with the same name already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Removes customer wishlist.'
            tags:
                - wishlists
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-wishlists
            responses:
                204:
                    description: 'Expected response to a valid request.'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /wishlists:
        get:
            summary: 'Retrieves all customer wishlists.'
            tags:
                - wishlists
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-wishlists
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        post:
            summary: 'Creates wishlist.'
            tags:
                - wishlists
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestWishlistsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-wishlists
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistsResponse'
                400:
                    description: 'Wishlist with the same name already exists, Wishlist name has wrong format.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/wishlists/{wishlistId}/wishlist-items':
        post:
            summary: 'Adds an item to the wishlist.'
            tags:
                - wishlist-items
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestWishlistItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-wishlists-wishlist-items
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistItemsResponse'
                400:
                    description: 'Can''t add an item.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    '/wishlists/{wishlistId}/wishlist-items/{wishlistItemId}':
        patch:
            summary: 'Updates the wishlist item.'
            tags:
                - wishlist-items
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    name: wishlistItemId
                    in: path
                    required: true
                    description: 'Id of wishlist item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestWishlistItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-wishlists-wishlist-items
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestWishlistItemsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Cannot update the wishlist list item.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
        delete:
            summary: 'Removes item from the wishlist.'
            tags:
                - wishlist-items
            parameters:
                -
                    name: wishlistId
                    in: path
                    required: true
                    description: 'Id of wishlist.'
                    schema:
                        type: string
                -
                    name: wishlistItemId
                    in: path
                    required: true
                    description: 'Id of wishlist item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-wishlists-wishlist-items
            responses:
                204:
                    description: 'Expected response to a valid request.'
                404:
                    description: 'Wishlist not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                422:
                    description: 'Wishlist item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
    /tire-search:
        get:
            summary: 'Tire search.'
            tags:
                - tire-search
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-tire-search
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCatalogSearchCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestErrorMessage'
components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
    schemas:
        AbstractProductsRestAttributes:
            properties:
                manufacturerLogoSmall:
                    type: string
                manufacturerLogoMedium:
                    type: string
                manufacturerLogoLarge:
                    type: string
                manufacturerLogoThumbnail:
                    type: string
                documents:
                    type: array
                    items: {  }
                attributes:
                    type: array
                    items: {  }
                sku:
                    type: string
                name:
                    type: string
                description:
                    type: string
                superAttributesDefinition:
                    type: array
                    items: {  }
                superAttributes:
                    type: array
                    items: {  }
                attributeMap:
                    type: array
                    items: {  }
                metaTitle:
                    type: string
                metaKeywords:
                    type: string
                metaDescription:
                    type: string
                attributeNames:
                    type: array
                    items: {  }
                url:
                    type: string
        AbstractProductsRestCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/AbstractProductsRestCollectionResponseData'
        AbstractProductsRestCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/AbstractProductsRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        AbstractProductsRestIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        AbstractProductsRestRelationships:
            properties:
                abstract-product-prices:
                    $ref: '#/components/schemas/RestRelationshipsData'
                abstract-product-image-sets:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
                abstract-product-availabilities:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-tax-sets:
                    $ref: '#/components/schemas/RestRelationshipsData'
                category-nodes:
                    $ref: '#/components/schemas/RestRelationshipsData'
        AbstractProductsRestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/AbstractProductsRestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/AbstractProductsRestIncluded'
        AbstractProductsRestResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/AbstractProductsRestRelationships'
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/AbstractProductsRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        CheckoutConfiguration:
            properties:
                strategy:
                    type: string
                scripts:
                    type: array
                    items:
                        $ref: '#/components/schemas/Script'
                paymentServiceProviderData:
                    type: array
                    items: {  }
        ConcreteProductsRestAttributes:
            properties:
                hPrase:
                    type: array
                    items: {  }
                euhPhrase:
                    type: array
                    items: {  }
                signalword:
                    type: array
                    items: {  }
                pictoImageSmall:
                    type: array
                    items: {  }
                attributes:
                    type: array
                    items: {  }
                sku:
                    type: string
                productAbstractSku:
                    type: string
                name:
                    type: string
                description:
                    type: string
                superAttributesDefinition:
                    type: array
                    items: {  }
                metaTitle:
                    type: string
                metaKeywords:
                    type: string
                metaDescription:
                    type: string
                attributeNames:
                    type: array
                    items: {  }
        ConcreteProductsRestIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        ConcreteProductsRestRelationships:
            properties:
                concrete-product-prices:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-product-image-sets:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-product-availabilities:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-measurement-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
                sales-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
                abstract-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        ConcreteProductsRestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/ConcreteProductsRestIncluded'
        ConcreteProductsRestResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/ConcreteProductsRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/ConcreteProductsRestRelationships'
        Endpoint:
            properties:
                name:
                    type: string
                path:
                    type: string
        HealthCheckServiceResponse:
            properties:
                name:
                    type: string
                status:
                    type: boolean
                message:
                    type: string
        PaymentMethodAppConfiguration:
            properties:
                baseUrl:
                    type: string
                endpoints:
                    type: array
                    items:
                        $ref: '#/components/schemas/Endpoint'
                checkoutConfiguration:
                    $ref: '#/components/schemas/CheckoutConfiguration'
        RestAbstractProductAvailabilityAttributes:
            properties:
                quantity:
                    type: number
                availability:
                    type: boolean
        RestAbstractProductAvailabilityCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
        RestAbstractProductAvailabilityCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAbstractProductAvailabilityAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAccessTokensRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestAccessTokensRequestData'
        RestAccessTokensRequestAttributes:
            properties:
                username:
                    type: string
                password:
                    type: string
            required:
                - username
                - password
        RestAccessTokensRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAccessTokensRequestAttributes'
        RestAddress:
            properties:
                id:
                    type: string
                salutation:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                address1:
                    type: string
                address2:
                    type: string
                address3:
                    type: string
                zipCode:
                    type: string
                city:
                    type: string
                country:
                    type: string
                iso2Code:
                    type: string
                company:
                    type: string
                phone:
                    type: string
                isDefaultBilling:
                    type: boolean
                isDefaultShipping:
                    type: boolean
                idCompanyBusinessUnitAddress:
                    type: string
        RestAddressAttributes:
            properties:
                salutation:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                address1:
                    type: string
                address2:
                    type: string
                address3:
                    type: string
                zipCode:
                    type: string
                city:
                    type: string
                country:
                    type: string
                iso2Code:
                    type: string
                company:
                    type: string
                phone:
                    type: string
                isDefaultShipping:
                    type: boolean
                isDefaultBilling:
                    type: boolean
        RestAddressCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
        RestAddressCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAddressAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAddressRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestAddressRequestData'
        RestAddressRequestAttributes:
            properties:
                salutation:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                address1:
                    type: string
                address2:
                    type: string
                zipCode:
                    type: string
                city:
                    type: string
                iso2Code:
                    type: string
                isDefaultShipping:
                    type: boolean
                isDefaultBilling:
                    type: boolean
            required:
                - salutation
                - firstName
                - lastName
                - address1
                - address2
                - zipCode
                - city
                - iso2Code
        RestAddressRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAddressRequestAttributes'
        RestAddressResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestAddressResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAddressResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAddressAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAddressTransfer:
            properties:
                id:
                    type: string
                salutation:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                address1:
                    type: string
                address2:
                    type: string
                address3:
                    type: string
                zipCode:
                    type: string
                city:
                    type: string
                iso2Code:
                    type: string
                company:
                    type: string
                phone:
                    type: string
                isDefaultBilling:
                    type: boolean
                isDefaultShipping:
                    type: boolean
            required:
                - salutation
                - firstName
                - lastName
                - address1
                - address2
                - address3
                - zipCode
                - city
                - iso2Code
                - company
                - phone
        RestAgentAccessTokensAttributes:
            properties:
                tokenType:
                    type: string
                expiresIn:
                    type: string
                accessToken:
                    type: string
                refreshToken:
                    type: string
        RestAgentAccessTokensRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestAgentAccessTokensRequestRequestData'
        RestAgentAccessTokensRequestRequestAttributes:
            properties:
                username:
                    type: string
                password:
                    type: string
            required:
                - username
                - password
        RestAgentAccessTokensRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAgentAccessTokensRequestRequestAttributes'
        RestAgentAccessTokensResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestAgentAccessTokensResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAgentAccessTokensResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestAgentAccessTokensAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAgentCustomerImpersonationAccessTokensAttributes:
            properties:
                tokenType:
                    type: string
                expiresIn:
                    type: string
                accessToken:
                    type: string
                refreshToken:
                    type: string
        RestAgentCustomerImpersonationAccessTokensRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensRequestRequestData'
        RestAgentCustomerImpersonationAccessTokensRequestRequestAttributes:
            properties:
                customerReference:
                    type: string
            required:
                - customerReference
        RestAgentCustomerImpersonationAccessTokensRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensRequestRequestAttributes'
        RestAgentCustomerImpersonationAccessTokensResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAgentCustomerImpersonationAccessTokensResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestAgentCustomerImpersonationAccessTokensAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAgentCustomerSearchAttributes:
            properties:
                customers:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAgentCustomerSearchCustomersAttributes'
        RestAgentCustomerSearchCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAgentCustomerSearchCollectionResponseData'
        RestAgentCustomerSearchCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestAgentCustomerSearchAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestAgentCustomerSearchCustomersAttributes:
            properties:
                customerReference:
                    type: string
                email:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
        RestCalculatedDiscount:
            properties:
                unitAmount:
                    type: integer
                sumAmount:
                    type: integer
                displayName:
                    type: string
                description:
                    type: string
                voucherCode:
                    type: string
                quantity:
                    type: integer
        RestCartCodeRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartCodeRequestRequestData'
        RestCartCodeRequestRequestAttributes:
            properties:
                code:
                    type: string
        RestCartCodeRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartCodeRequestRequestAttributes'
        RestCartItemCalculations:
            properties:
                unitPrice:
                    type: integer
                sumPrice:
                    type: integer
                taxRate:
                    type: integer
                unitNetPrice:
                    type: integer
                sumNetPrice:
                    type: integer
                unitGrossPrice:
                    type: integer
                sumGrossPrice:
                    type: integer
                unitTaxAmountFullAggregation:
                    type: integer
                sumTaxAmountFullAggregation:
                    type: integer
                sumSubtotalAggregation:
                    type: integer
                unitSubtotalAggregation:
                    type: integer
                unitProductOptionPriceAggregation:
                    type: integer
                sumProductOptionPriceAggregation:
                    type: integer
                unitDiscountAmountAggregation:
                    type: integer
                sumDiscountAmountAggregation:
                    type: integer
                unitDiscountAmountFullAggregation:
                    type: integer
                sumDiscountAmountFullAggregation:
                    type: integer
                unitPriceToPayAggregation:
                    type: integer
                sumPriceToPayAggregation:
                    type: integer
        RestCartItemsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartItemsRequestData'
        RestCartItemsRequestAttributes:
            properties:
                sku:
                    type: string
                quantity:
                    type: integer
                idPromotionalItem:
                    type: string
                salesUnit:
                    $ref: '#/components/schemas/RestCartItemsSalesUnitRequestAttributes'
            required:
                - sku
                - quantity
        RestCartItemsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartItemsRequestAttributes'
        RestCartItemsSalesUnitAttributes:
            properties:
                id:
                    type: integer
                amount:
                    type: number
        RestCartItemsSalesUnitRequestAttributes:
            properties:
                id:
                    type: integer
                amount:
                    type: number
        RestCartsAttributes:
            properties:
                priceMode:
                    type: string
                currency:
                    type: string
                store:
                    type: string
                discounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartsDiscounts'
                totals:
                    $ref: '#/components/schemas/RestCartsTotals'
        RestCartsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCartsIncluded'
        RestCartsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCartsRelationships'
        RestCartsDiscounts:
            properties:
                displayName:
                    type: string
                amount:
                    type: integer
                code:
                    type: string
        RestCartsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestSharedCartsResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyUserCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyRoleCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestDiscountsResponseData'
                    -
                        $ref: '#/components/schemas/RestItemsResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
                    -
                        $ref: '#/components/schemas/RestPromotionalItemsResponseData'
            type: array
        RestCartsRelationships:
            properties:
                shared-carts:
                    $ref: '#/components/schemas/RestRelationshipsData'
                vouchers:
                    $ref: '#/components/schemas/RestRelationshipsData'
                cart-rules:
                    $ref: '#/components/schemas/RestRelationshipsData'
                items:
                    $ref: '#/components/schemas/RestRelationshipsData'
                promotional-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
                sales-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCartsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartsRequestData'
        RestCartsRequestAttributes:
            properties:
                priceMode:
                    type: string
                currency:
                    type: string
                store:
                    type: string
            required:
                - priceMode
                - currency
                - store
        RestCartsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartsRequestAttributes'
        RestCartsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCartsIncluded'
        RestCartsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCartsRelationships'
        RestCartsTotals:
            properties:
                expenseTotal:
                    type: integer
                discountTotal:
                    type: integer
                taxTotal:
                    type: integer
                subtotal:
                    type: integer
                grandTotal:
                    type: integer
                priceToPay:
                    type: integer
                shipmentTotal:
                    type: integer
        RestCatalogSearchAbstractProducts:
            properties:
                tireViewAttributes:
                    type: array
                    items: {  }
                abstractSku:
                    type: string
                images:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchProductImage'
                price:
                    type: integer
                abstractName:
                    type: string
                prices:
                    type: array
                    items: {  }
        RestCatalogSearchAttributes:
            properties:
                tireValueFacets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestFacetSearchResult'
                sort:
                    $ref: '#/components/schemas/RestCatalogSearchSort'
                pagination:
                    $ref: '#/components/schemas/RestCatalogSearchPagination'
                abstractProducts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchAbstractProducts'
                valueFacets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestFacetSearchResult'
                rangeFacets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestRangeSearchResult'
                categoryTreeFilter:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodeSearchResultAttributes'
                spellingSuggestion:
                    type: string
        RestCatalogSearchCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCatalogSearchIncluded'
        RestCatalogSearchCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCatalogSearchAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCatalogSearchRelationships'
        RestCatalogSearchIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestCatalogSearchPagination:
            properties:
                numFound:
                    type: integer
                currentPage:
                    type: integer
                maxPage:
                    type: integer
                currentItemsPerPage:
                    type: integer
                config:
                    $ref: '#/components/schemas/RestCatalogSearchPaginationConfig'
        RestCatalogSearchPaginationConfig:
            properties:
                parameterName:
                    type: string
                itemsPerPageParameterName:
                    type: string
                defaultItemsPerPage:
                    type: integer
                validItemsPerPageOptions:
                    type: array
                    items: {  }
        RestCatalogSearchProductImage:
            properties:
                externalUrlSmall:
                    type: string
                externalUrlLarge:
                    type: string
        RestCatalogSearchRelationships:
            properties:
                abstract-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCatalogSearchSort:
            properties:
                sortParamNames:
                    type: array
                    items: {  }
                sortParamLocalizedNames:
                    type: array
                    items: {  }
                currentSortParam:
                    type: string
                currentSortOrder:
                    type: string
        RestCatalogSearchSuggestionAbstractProducts:
            properties:
                images:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionProductImage'
                price:
                    type: integer
                abstractName:
                    type: string
                prices:
                    type: array
                    items: {  }
                abstractSku:
                    type: string
                materialNumber:
                    type: string
                energyLabel:
                    type: string
                censhareSparte:
                    type: integer
                isResource:
                    type: boolean
                isVignette:
                    type: boolean
                materialGroup:
                    type: string
                prdha:
                    type: integer
                originalSupplierNumber:
                    type: string
                eanNumber:
                    type: integer
                baseUnit:
                    type: string
                distributionChannel:
                    type: integer
                materialStatus:
                    type: string
                materialStatusCode:
                    type: integer
                deliveryPositionTypeGroup:
                    type: string
                transportationGroup:
                    type: string
                available:
                    type: boolean
                manufacturerLogoSmall:
                    type: string
                manufacturerLogoMedium:
                    type: string
                manufacturerLogoLarge:
                    type: string
                manufacturerLogoThumbnail:
                    type: string
                manufacturerName:
                    type: string
                testReportImage:
                    type: string
                testReportText:
                    type: string
                subheadline:
                    type: string
                detailsTitle:
                    type: string
                detailsContent:
                    type: string
                technicalData:
                    type: string
                montageService:
                    type: string
                downloads:
                    type: string
                dataSheet:
                    type: string
                crosssellingHeadline:
                    type: string
                crosssellingSubheadline:
                    type: string
                unit:
                    type: string
                descriptionPrint:
                    type: string
                highlight1:
                    type: string
                highlight2:
                    type: string
                highlight3:
                    type: string
                highlight4:
                    type: string
                highlight5:
                    type: string
                documents:
                    type: string
                equipment:
                    type: string
                delivery:
                    type: string
                videos:
                    type: string
                concreteSkus:
                    type: array
                    items: {  }
                concreteIds:
                    type: array
                    items: {  }
                productSetIds:
                    type: array
                    items: {  }
                snowChainTireDimension:
                    type: string
                url:
                    type: string
        RestCatalogSearchSuggestionCategories:
            properties:
                idCategory:
                    type: integer
                name:
                    type: string
                url:
                    type: string
        RestCatalogSearchSuggestionCmsPages:
            properties:
                name:
                    type: string
                url:
                    type: string
        RestCatalogSearchSuggestionProductImage:
            properties:
                externalUrlSmall:
                    type: string
                externalUrlLarge:
                    type: string
        RestCatalogSearchSuggestionsAttributes:
            properties:
                completion:
                    type: array
                    items:
                        type: string
                abstractProducts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionAbstractProducts'
                categories:
                    type: array
                    items: {  }
                cmsPages:
                    type: array
                    items: {  }
                categoryCollection:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionCategories'
                cmsPageCollection:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionCmsPages'
        RestCatalogSearchSuggestionsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCatalogSearchSuggestionsIncluded'
        RestCatalogSearchSuggestionsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCatalogSearchSuggestionsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCatalogSearchSuggestionsRelationships'
        RestCatalogSearchSuggestionsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestCatalogSearchSuggestionsRelationships:
            properties:
                abstract-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCategoryNodeSearchResultAttributes:
            properties:
                nodeId:
                    type: integer
                name:
                    type: string
                docCount:
                    type: integer
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodeSearchResultAttributes'
        RestCategoryNodesAttributes:
            properties:
                nodeId:
                    type: integer
                name:
                    type: string
                metaTitle:
                    type: string
                metaKeywords:
                    type: string
                metaDescription:
                    type: string
                isActive:
                    type: boolean
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodesAttributes'
                parents:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodesAttributes'
                order:
                    type: integer
                url:
                    type: string
        RestCategoryNodesResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCategoryNodesResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCategoryNodesResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCategoryNodesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCategoryTreesAttributes:
            properties:
                nodeId:
                    type: integer
                order:
                    type: integer
                name:
                    type: string
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryTreesAttributes'
                url:
                    type: string
        RestCategoryTreesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryTreesCollectionResponseData'
        RestCategoryTreesCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCategoryTreesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCheckoutDataResponseAttributes:
            properties:
                addresses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAddress'
                paymentProviders:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentProvider'
                shipmentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentMethod'
                selectedShipmentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentMethod'
                selectedPaymentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentMethod'
        RestCheckoutDataResponseIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestShipmentsResponseData'
                    -
                        $ref: '#/components/schemas/RestPaymentMethodsResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCartsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestSharedCartsResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyUserCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyRoleCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestDiscountsResponseData'
                    -
                        $ref: '#/components/schemas/RestDiscountsResponseData'
                    -
                        $ref: '#/components/schemas/RestItemsResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
                    -
                        $ref: '#/components/schemas/RestPromotionalItemsResponseData'
            type: array
        RestCheckoutDataResponseRelationships:
            properties:
                shipments:
                    $ref: '#/components/schemas/RestRelationshipsData'
                payment-methods:
                    $ref: '#/components/schemas/RestRelationshipsData'
                company-business-unit-addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
                addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
                carts:
                    $ref: '#/components/schemas/RestRelationshipsData'
                guest-carts:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCheckoutDataResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutDataResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCheckoutDataResponseIncluded'
        RestCheckoutDataResponseResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCheckoutDataResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCheckoutDataResponseRelationships'
        RestCheckoutRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutRequestRequestData'
        RestCheckoutRequestRequestAttributes:
            properties:
                customer:
                    $ref: '#/components/schemas/RestCustomerTransfer'
                idCart:
                    type: string
                billingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                shippingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                payments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentTransfer'
                shipment:
                    $ref: '#/components/schemas/RestShipmentTransfer'
                preOrderPaymentData:
                    type: array
                    items: {  }
                shipments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentsTransfer'
            required:
                - idCart
        RestCheckoutRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCheckoutRequestRequestAttributes'
        RestCheckoutResponseAttributes:
            properties:
                orderReference:
                    type: string
                redirectUrl:
                    type: string
                isExternalRedirect:
                    type: boolean
        RestCheckoutResponseIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestOrdersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestOrderShipmentsResponseData'
            type: array
        RestCheckoutResponseRelationships:
            properties:
                orders:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCheckoutResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCheckoutResponseIncluded'
        RestCheckoutResponseResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCheckoutResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCheckoutResponseRelationships'
        RestCmsPagesAttributes:
            properties:
                pageKey:
                    type: string
                name:
                    type: string
                validTo:
                    type: string
                isSearchable:
                    type: boolean
                url:
                    type: string
        RestCmsPagesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCmsPagesCollectionResponseData'
        RestCmsPagesCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCmsPagesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCmsPagesResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCmsPagesResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCmsPagesResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCmsPagesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyAttributes:
            properties:
                isActive:
                    type: boolean
                name:
                    type: string
                status:
                    type: string
        RestCompanyBusinessUnitAddressesAttributes:
            properties:
                address1:
                    type: string
                address2:
                    type: string
                address3:
                    type: string
                zipCode:
                    type: string
                city:
                    type: string
                phone:
                    type: string
                iso2Code:
                    type: string
                comment:
                    type: string
        RestCompanyBusinessUnitAddressesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
        RestCompanyBusinessUnitAddressesCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyBusinessUnitAddressesResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyBusinessUnitAddressesResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyBusinessUnitAttributes:
            properties:
                customerRoute:
                    type: array
                    items: {  }
                defaultBillingAddress:
                    type: string
                name:
                    type: string
                email:
                    type: string
                phone:
                    type: string
                externalUrl:
                    type: string
                bic:
                    type: string
                iban:
                    type: string
        RestCompanyBusinessUnitCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitIncluded'
        RestCompanyBusinessUnitCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitRelationships'
        RestCompanyBusinessUnitIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
            type: array
        RestCompanyBusinessUnitRelationships:
            properties:
                companies:
                    $ref: '#/components/schemas/RestRelationshipsData'
                company-business-unit-addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCompanyBusinessUnitResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitIncluded'
        RestCompanyBusinessUnitResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitRelationships'
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyBusinessUnitAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
        RestCompanyCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyRoleAttributes:
            properties:
                name:
                    type: string
                isDefault:
                    type: boolean
        RestCompanyRoleCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCompanyRoleCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCompanyRoleIncluded'
        RestCompanyRoleCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyRoleAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCompanyRoleRelationships'
        RestCompanyRoleIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
            type: array
        RestCompanyRoleRelationships:
            properties:
                companies:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCompanyRoleResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyRoleResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCompanyRoleIncluded'
        RestCompanyRoleResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/RestCompanyRoleRelationships'
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyRoleAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyUserAccessTokenResponseAttributes:
            properties:
                tokenType:
                    type: string
                expiresIn:
                    type: string
                accessToken:
                    type: string
                refreshToken:
                    type: string
        RestCompanyUserAccessTokenResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyUserAccessTokenResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyUserAccessTokenResponseResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyUserAccessTokenResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCompanyUserAccessTokensRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyUserAccessTokensRequestData'
        RestCompanyUserAccessTokensRequestAttributes:
            properties:
                idCompanyUser:
                    type: string
            required:
                - idCompanyUser
        RestCompanyUserAccessTokensRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyUserAccessTokensRequestAttributes'
        RestCompanyUserAttributes:
            properties:
                isActive:
                    type: boolean
                isDefault:
                    type: boolean
        RestCompanyUserCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCompanyUserCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCompanyUserIncluded'
        RestCompanyUserCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyUserAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCompanyUserRelationships'
        RestCompanyUserIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyRoleCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
            type: array
        RestCompanyUserRelationships:
            properties:
                companies:
                    $ref: '#/components/schemas/RestRelationshipsData'
                company-business-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
                company-roles:
                    $ref: '#/components/schemas/RestRelationshipsData'
                customers:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCompanyUserResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCompanyUserResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCompanyUserIncluded'
        RestCompanyUserResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCompanyUserAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCompanyUserRelationships'
        RestConcreteProductAvailabilityAttributes:
            properties:
                inventoryStatus:
                    type: string
                deliveryLines:
                    type: array
                    items:
                        $ref: '#/components/schemas/SapOrderSimulateV2DeliveryLine'
                isNeverOutOfStock:
                    type: boolean
                quantity:
                    type: number
                availability:
                    type: boolean
        RestConcreteProductAvailabilityCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
        RestConcreteProductAvailabilityCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestConcreteProductAvailabilityAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCurrency:
            properties:
                code:
                    type: string
                name:
                    type: string
                symbol:
                    type: string
        RestCustomerAccessAttributes:
            properties:
                resourceTypes:
                    type: array
                    items:
                        type: string
        RestCustomerAccessCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCustomerAccessCollectionResponseData'
        RestCustomerAccessCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerAccessAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerConfirmationRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerConfirmationRequestData'
        RestCustomerConfirmationRequestAttributes:
            properties:
                registrationKey:
                    type: string
            required:
                - registrationKey
        RestCustomerConfirmationRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerConfirmationRequestAttributes'
        RestCustomerForgottenPasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerForgottenPasswordRequestData'
        RestCustomerForgottenPasswordRequestAttributes:
            properties:
                email:
                    type: string
            required:
                - email
        RestCustomerForgottenPasswordRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerForgottenPasswordRequestAttributes'
        RestCustomerPasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerPasswordRequestData'
        RestCustomerPasswordRequestAttributes:
            properties:
                password:
                    type: string
                newPassword:
                    type: string
                confirmPassword:
                    type: string
            required:
                - password
                - newPassword
                - confirmPassword
        RestCustomerPasswordRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerPasswordRequestAttributes'
        RestCustomerRestorePasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerRestorePasswordRequestData'
        RestCustomerRestorePasswordRequestAttributes:
            properties:
                restorePasswordKey:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
            required:
                - restorePasswordKey
                - password
                - confirmPassword
        RestCustomerRestorePasswordRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerRestorePasswordRequestAttributes'
        RestCustomerTransfer:
            properties:
                email:
                    type: string
                salutation:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
        RestCustomersAttributes:
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                gender:
                    type: string
                dateOfBirth:
                    type: string
                salutation:
                    type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
                email:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
                acceptedTerms:
                    type: boolean
        RestCustomersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCustomersIncluded'
        RestCustomersCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCustomersRelationships'
        RestCustomersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
            type: array
        RestCustomersRelationships:
            properties:
                addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCustomersRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomersRequestData'
        RestCustomersRequestAttributes:
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                gender:
                    type: string
                salutation:
                    type: string
                email:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
                acceptedTerms:
                    type: boolean
            required:
                - firstName
                - lastName
                - gender
                - salutation
                - email
                - password
                - confirmPassword
                - acceptedTerms
        RestCustomersRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomersRequestAttributes'
        RestCustomersResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomersResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCustomersIncluded'
        RestCustomersResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/RestCustomersRelationships'
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestDiscountsAttributes:
            properties:
                amount:
                    type: integer
                code:
                    type: string
                discountType:
                    type: string
                displayName:
                    type: string
                isExclusive:
                    type: boolean
                expirationDateTime:
                    type: string
                discountPromotionAbstractSku:
                    type: string
                discountPromotionQuantity:
                    type: integer
        RestDiscountsRequestAttributes:
            properties:
                code:
                    type: string
        RestDiscountsRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestDiscountsRequestRequestData'
        RestDiscountsRequestRequestAttributes:
            properties:
                code:
                    type: string
        RestDiscountsRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestDiscountsRequestRequestAttributes'
        RestDiscountsRequestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestDiscountsRequestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestDiscountsRequestResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestDiscountsRequestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestDiscountsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestDiscountsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestErrorMessage:
            properties:
                code:
                    type: string
                detail:
                    type: string
                status:
                    type: integer
        RestFacetConfig:
            properties:
                parameterName:
                    type: string
                isMultiValued:
                    type: boolean
        RestFacetSearchResult:
            properties:
                name:
                    type: string
                localizedName:
                    type: string
                docCount:
                    type: integer
                values:
                    type: array
                    items: {  }
                activeValue:
                    type: string
                config:
                    $ref: '#/components/schemas/RestFacetConfig'
        RestHealthCheckResponseAttributes:
            properties:
                status:
                    type: string
                statusCode:
                    type: integer
                message:
                    type: string
                healthCheckServiceResponses:
                    type: array
                    items:
                        $ref: '#/components/schemas/HealthCheckServiceResponse'
        RestHealthCheckResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestHealthCheckResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestHealthCheckResponseResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestHealthCheckResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestImagesAttributes:
            properties:
                externalUrlLarge:
                    type: string
                externalUrlSmall:
                    type: string
        RestItemsAttributes:
            properties:
                sku:
                    type: string
                quantity:
                    type: integer
                groupKey:
                    type: string
                abstractSku:
                    type: string
                amount:
                    type: integer
                calculations:
                    $ref: '#/components/schemas/RestCartItemCalculations'
                salesUnit:
                    $ref: '#/components/schemas/RestCartItemsSalesUnitAttributes'
        RestItemsRelationships:
            properties:
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
                sales-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestItemsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestItemsRelationships'
        RestLinks:
            properties:
                self:
                    type: string
        RestLocalizedProductManagementAttributeKeyAttributes:
            properties:
                localeName:
                    type: string
                translation:
                    type: string
        RestNavigationAttributes:
            properties:
                nodes:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestNavigationNode'
                name:
                    type: string
                isActive:
                    type: boolean
        RestNavigationIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestNavigationNode:
            properties:
                resourceId:
                    type: integer
                nodeType:
                    type: string
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestNavigationNode'
                isActive:
                    type: boolean
                title:
                    type: string
                url:
                    type: string
                cssClass:
                    type: string
                validFrom:
                    type: string
                validTo:
                    type: string
        RestNavigationRelationships:
            properties:
                category-nodes:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestNavigationResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestNavigationResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestNavigationIncluded'
        RestNavigationResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestNavigationAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestNavigationRelationships'
        RestOrderAddress:
            properties:
                salutation:
                    type: string
                firstName:
                    type: string
                middleName:
                    type: string
                lastName:
                    type: string
                address1:
                    type: string
                address2:
                    type: string
                address3:
                    type: string
                company:
                    type: string
                city:
                    type: string
                zipCode:
                    type: string
                poBox:
                    type: string
                phone:
                    type: string
                cellPhone:
                    type: string
                description:
                    type: string
                comment:
                    type: string
                email:
                    type: string
                country:
                    type: string
                iso2Code:
                    type: string
        RestOrderDetailsAttributes:
            properties:
                createdAt:
                    type: string
                totals:
                    $ref: '#/components/schemas/RestOrderTotalsAttributes'
                currencyIsoCode:
                    type: string
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderItemsAttributes'
                expenses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderExpensesAttributes'
                billingAddress:
                    $ref: '#/components/schemas/RestOrderAddress'
                shippingAddress:
                    $ref: '#/components/schemas/RestOrderAddress'
                priceMode:
                    type: string
                payments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderPayment'
                shipments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderShipment'
                calculatedDiscounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCalculatedDiscount'
        RestOrderDetailsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestOrderShipmentsResponseData'
            type: array
        RestOrderDetailsRelationships:
            properties:
                order-shipments:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestOrderDetailsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestOrderDetailsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestOrderDetailsIncluded'
        RestOrderDetailsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrderDetailsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestOrderDetailsRelationships'
        RestOrderExpensesAttributes:
            properties:
                type:
                    type: string
                name:
                    type: string
                sumPrice:
                    type: integer
                unitGrossPrice:
                    type: integer
                sumGrossPrice:
                    type: integer
                taxRate:
                    type: number
                unitNetPrice:
                    type: integer
                sumNetPrice:
                    type: integer
                canceledAmount:
                    type: integer
                unitDiscountAmountAggregation:
                    type: integer
                sumDiscountAmountAggregation:
                    type: integer
                unitTaxAmount:
                    type: integer
                sumTaxAmount:
                    type: integer
                unitPriceToPayAggregation:
                    type: integer
                sumPriceToPayAggregation:
                    type: integer
                taxAmountAfterCancellation:
                    type: integer
                idShipment:
                    type: integer
                idSalesExpense:
                    type: integer
        RestOrderItemMetadata:
            properties:
                superAttributes:
                    type: array
                    items: {  }
                image:
                    type: string
        RestOrderItemsAttributes:
            properties:
                name:
                    type: string
                sku:
                    type: string
                sumPrice:
                    type: integer
                quantity:
                    type: integer
                metadata:
                    $ref: '#/components/schemas/RestOrderItemMetadata'
                calculatedDiscounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCalculatedDiscount'
                unitGrossPrice:
                    type: integer
                sumGrossPrice:
                    type: integer
                taxRate:
                    type: number
                unitNetPrice:
                    type: integer
                sumNetPrice:
                    type: integer
                unitPrice:
                    type: integer
                unitTaxAmountFullAggregation:
                    type: integer
                sumTaxAmountFullAggregation:
                    type: integer
                refundableAmount:
                    type: integer
                canceledAmount:
                    type: integer
                sumSubtotalAggregation:
                    type: integer
                unitSubtotalAggregation:
                    type: integer
                unitProductOptionPriceAggregation:
                    type: integer
                sumProductOptionPriceAggregation:
                    type: integer
                unitExpensePriceAggregation:
                    type: integer
                sumExpensePriceAggregation:
                    type: integer
                unitDiscountAmountAggregation:
                    type: integer
                sumDiscountAmountAggregation:
                    type: integer
                unitDiscountAmountFullAggregation:
                    type: integer
                sumDiscountAmountFullAggregation:
                    type: integer
                unitPriceToPayAggregation:
                    type: integer
                sumPriceToPayAggregation:
                    type: integer
                taxRateAverageAggregation:
                    type: number
                taxAmountAfterCancellation:
                    type: integer
                orderReference:
                    type: string
                uuid:
                    type: string
                isReturnable:
                    type: boolean
                idShipment:
                    type: integer
                amount:
                    type: number
                salesUnit:
                    $ref: '#/components/schemas/RestOrdersSalesUnitAttributes'
        RestOrderPayment:
            properties:
                amount:
                    type: integer
                paymentProvider:
                    type: string
                paymentMethod:
                    type: string
        RestOrderPaymentsAttributes:
            properties:
                paymentIdentifier:
                    type: string
                dataPayload:
                    type: array
                    items: {  }
        RestOrderPaymentsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestOrderPaymentsRequestData'
        RestOrderPaymentsRequestAttributes:
            properties:
                paymentIdentifier:
                    type: string
                dataPayload:
                    type: array
                    items: {  }
            required:
                - paymentIdentifier
                - dataPayload
        RestOrderPaymentsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrderPaymentsRequestAttributes'
        RestOrderPaymentsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestOrderPaymentsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestOrderPaymentsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrderPaymentsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestOrderShipment:
            properties:
                shipmentMethodName:
                    type: string
                carrierName:
                    type: string
                deliveryTime:
                    type: integer
                defaultGrossPrice:
                    type: integer
                defaultNetPrice:
                    type: integer
                currencyIsoCode:
                    type: string
        RestOrderShipmentsAttributes:
            properties:
                itemUuids:
                    type: array
                    items:
                        type: string
                shippingAddress:
                    $ref: '#/components/schemas/RestOrderAddress'
                methodName:
                    type: string
                carrierName:
                    type: string
                requestedDeliveryDate:
                    type: string
        RestOrderShipmentsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrderShipmentsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestOrderTotalsAttributes:
            properties:
                expenseTotal:
                    type: integer
                discountTotal:
                    type: integer
                taxTotal:
                    type: integer
                subtotal:
                    type: integer
                grandTotal:
                    type: integer
                canceledTotal:
                    type: integer
                remunerationTotal:
                    type: integer
        RestOrdersAttributes:
            properties:
                createdAt:
                    type: string
                totals:
                    $ref: '#/components/schemas/RestOrderTotalsAttributes'
                currencyIsoCode:
                    type: string
                priceMode:
                    type: string
        RestOrdersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrdersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestOrdersIncluded'
        RestOrdersCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrdersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestOrdersRelationships'
        RestOrdersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestOrderShipmentsResponseData'
            type: array
        RestOrdersProductMeasurementUnitsAttributes:
            properties:
                name:
                    type: string
                code:
                    type: string
        RestOrdersRelationships:
            properties:
                order-shipments:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestOrdersResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/RestOrdersRelationships'
        RestOrdersSalesUnitAttributes:
            properties:
                conversion:
                    type: integer
                precision:
                    type: integer
                productMeasurementUnit:
                    $ref: '#/components/schemas/RestOrdersProductMeasurementUnitsAttributes'
        RestPaymentMethod:
            properties:
                paymentMethodName:
                    type: string
                paymentProviderName:
                    type: string
                requiredRequestData:
                    type: array
                    items: {  }
                paymentMethodAppConfiguration:
                    $ref: '#/components/schemas/PaymentMethodAppConfiguration'
        RestPaymentMethodsAttributes:
            properties:
                paymentMethodName:
                    type: string
                paymentProviderName:
                    type: string
                priority:
                    type: integer
                requiredRequestData:
                    type: array
                    items: {  }
                paymentMethodAppConfiguration:
                    $ref: '#/components/schemas/PaymentMethodAppConfiguration'
        RestPaymentMethodsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestPaymentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestPaymentProvider:
            properties:
                paymentProviderName:
                    type: string
                paymentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentMethod'
        RestPaymentTransfer:
            properties:
                paymentProviderName:
                    type: string
                paymentMethodName:
                    type: string
                paymentSelection:
                    type: string
                amount:
                    type: integer
            required:
                - paymentProviderName
                - paymentMethodName
        RestPriceProduct:
            properties:
                priceTypeName:
                    type: string
                grossAmount:
                    type: integer
                netAmount:
                    type: integer
                currency:
                    $ref: '#/components/schemas/RestCurrency'
        RestProductConcreteAvailability:
            properties:
                isNeverOutOfStock:
                    type: boolean
                availability:
                    type: boolean
                quantity:
                    type: number
        RestProductImageSet:
            properties:
                name:
                    type: string
                images:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestImagesAttributes'
        RestProductImageSetsAttributes:
            properties:
                imageSets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductImageSet'
        RestProductImageSetsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
        RestProductImageSetsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductImageSetsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductManagementAttributeAttributes:
            properties:
                key:
                    type: string
                inputType:
                    type: string
                allowInput:
                    type: boolean
                isSuper:
                    type: boolean
                localizedKeys:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestLocalizedProductManagementAttributeKeyAttributes'
                values:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductManagementAttributeValueAttributes'
        RestProductManagementAttributeCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductManagementAttributeCollectionResponseData'
        RestProductManagementAttributeCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductManagementAttributeAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductManagementAttributeResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestProductManagementAttributeResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductManagementAttributeResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductManagementAttributeAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductManagementAttributeValueAttributes:
            properties:
                value:
                    type: string
                localizedValues:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductManagementAttributeValueTranslationAttributes'
        RestProductManagementAttributeValueTranslationAttributes:
            properties:
                localeName:
                    type: string
                translation:
                    type: string
        RestProductMeasurementUnitsAttributes:
            properties:
                name:
                    type: string
                defaultPrecision:
                    type: integer
        RestProductMeasurementUnitsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductMeasurementUnitsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductMeasurementUnitsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductPriceAttributes:
            properties:
                allPrices:
                    type: array
                    items:
                        type: integer
                priceTypeName:
                    type: string
                netAmount:
                    type: integer
                grossAmount:
                    type: integer
                currency:
                    $ref: '#/components/schemas/RestCurrency'
        RestProductPricesAttributes:
            properties:
                price:
                    type: integer
                prices:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductPriceAttributes'
        RestProductPricesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
        RestProductPricesCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductPricesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductTaxRate:
            properties:
                name:
                    type: string
                rate:
                    type: string
                country:
                    type: string
        RestProductTaxSetsAttributes:
            properties:
                name:
                    type: string
                restTaxRates:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductTaxRate'
        RestProductTaxSetsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
        RestProductTaxSetsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductTaxSetsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestPromotionalItemsAttributes:
            properties:
                sku:
                    type: string
                quantity:
                    type: integer
                skus:
                    type: array
                    items:
                        type: string
        RestPromotionalItemsRelationships:
            properties:
                abstract-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestPromotionalItemsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestPromotionalItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestPromotionalItemsRelationships'
        RestRangeSearchResult:
            properties:
                name:
                    type: string
                localizedName:
                    type: string
                min:
                    type: number
                max:
                    type: number
                activeMin:
                    type: number
                activeMax:
                    type: number
                docCount:
                    type: integer
                config:
                    $ref: '#/components/schemas/RestFacetConfig'
        RestRefreshTokensRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestRefreshTokensRequestData'
        RestRefreshTokensRequestAttributes:
            properties:
                refreshToken:
                    type: string
            required:
                - refreshToken
        RestRefreshTokensRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestRefreshTokensRequestAttributes'
        RestRelationships:
            properties:
                id:
                    type: string
                type:
                    type: string
        RestRelationshipsData:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestRelationships'
        RestSalesUnitsAttributes:
            properties:
                conversion:
                    type: integer
                precision:
                    type: integer
                isDisplayed:
                    type: boolean
                isDefault:
                    type: boolean
                productMeasurementUnitCode:
                    type: string
        RestSalesUnitsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestSalesUnitsIncluded'
        RestSalesUnitsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSalesUnitsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestSalesUnitsRelationships'
        RestSalesUnitsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
            type: array
        RestSalesUnitsRelationships:
            properties:
                product-measurement-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestSalesUnitsResponseData:
            properties:
                relationships:
                    $ref: '#/components/schemas/RestSalesUnitsRelationships'
        RestSharedCartsAttributes:
            properties:
                idCompanyUser:
                    type: string
                idCartPermissionGroup:
                    type: integer
        RestSharedCartsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestCompanyUserCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyBusinessUnitAddressesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCompanyRoleCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestAddressCollectionResponseData'
            type: array
        RestSharedCartsRelationships:
            properties:
                company-users:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestSharedCartsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestSharedCartsRequestData'
        RestSharedCartsRequestAttributes:
            properties:
                idCompanyUser:
                    type: string
                idCartPermissionGroup:
                    type: integer
        RestSharedCartsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSharedCartsRequestAttributes'
        RestSharedCartsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestSharedCartsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestSharedCartsIncluded'
        RestSharedCartsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSharedCartsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestSharedCartsRelationships'
        RestShipmentMethod:
            properties:
                id:
                    type: integer
                name:
                    type: string
                carrierName:
                    type: string
                price:
                    type: integer
                taxRate:
                    type: number
                deliveryTime:
                    type: integer
                currencyIsoCode:
                    type: string
        RestShipmentMethodsAttributes:
            properties:
                name:
                    type: string
                carrierName:
                    type: string
                deliveryTime:
                    type: integer
                price:
                    type: integer
                currencyIsoCode:
                    type: string
        RestShipmentMethodsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShipmentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestShipmentTransfer:
            properties:
                idShipmentMethod:
                    type: integer
        RestShipmentsAttributes:
            properties:
                items:
                    type: array
                    items:
                        type: string
                shippingAddress:
                    $ref: '#/components/schemas/RestAddress'
                selectedShipmentMethod:
                    $ref: '#/components/schemas/RestShipmentMethod'
                requestedDeliveryDate:
                    type: string
        RestShipmentsRelationships:
            properties:
                shipment-methods:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestShipmentsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShipmentsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestShipmentsRelationships'
        RestShipmentsTransfer:
            properties:
                shippingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                items:
                    type: array
                    items:
                        type: string
                idShipmentMethod:
                    type: integer
                requestedDeliveryDate:
                    type: string
        RestShoppingListItemsAttributes:
            properties:
                quantity:
                    type: integer
                sku:
                    type: string
        RestShoppingListItemsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestShoppingListItemsRelationships:
            properties:
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestShoppingListItemsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestShoppingListItemsRequestData'
        RestShoppingListItemsRequestAttributes:
            properties:
                quantity:
                    type: integer
                sku:
                    type: string
            required:
                - quantity
                - sku
        RestShoppingListItemsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShoppingListItemsRequestAttributes'
        RestShoppingListItemsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestShoppingListItemsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestShoppingListItemsIncluded'
        RestShoppingListItemsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShoppingListItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestShoppingListItemsRelationships'
        RestShoppingListRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestShoppingListRequestRequestData'
        RestShoppingListRequestRequestAttributes:
            properties:
                name:
                    type: string
            required:
                - name
        RestShoppingListRequestRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShoppingListRequestRequestAttributes'
        RestShoppingListsAttributes:
            properties:
                owner:
                    type: string
                name:
                    type: string
                numberOfItems:
                    type: integer
                updatedAt:
                    type: string
                createdAt:
                    type: string
        RestShoppingListsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShoppingListsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestShoppingListsIncluded'
        RestShoppingListsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShoppingListsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestShoppingListsRelationships'
        RestShoppingListsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestShoppingListItemsResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestShoppingListsRelationships:
            properties:
                shopping-list-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestShoppingListsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestShoppingListsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestShoppingListsIncluded'
        RestShoppingListsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShoppingListsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestShoppingListsRelationships'
        RestTokenAttributes:
            properties:
                grantType:
                    type: string
                username:
                    type: string
                password:
                    type: string
        RestTokenResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestTokenResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseAttributes:
            properties:
                tokenType:
                    type: string
                expiresIn:
                    type: string
                accessToken:
                    type: string
                refreshToken:
                    type: string
                idCompanyUser:
                    type: string
        RestTokenResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestTokenAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestTokenResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestTokenResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestUrlResolverAttributes:
            properties:
                entityType:
                    type: string
                entityId:
                    type: string
        RestUrlResolverCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestUrlResolverCollectionResponseData'
        RestUrlResolverCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestUrlResolverAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestWishlistItemsAttributes:
            properties:
                availability:
                    $ref: '#/components/schemas/RestProductConcreteAvailability'
                prices:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPriceProduct'
                sku:
                    type: string
                id:
                    type: string
        RestWishlistItemsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/AbstractProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestAbstractProductAvailabilityCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductTaxSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCategoryNodesResponseData'
            type: array
        RestWishlistItemsRelationships:
            properties:
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestWishlistItemsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestWishlistItemsRequestData'
        RestWishlistItemsRequestAttributes:
            properties:
                sku:
                    type: string
            required:
                - sku
        RestWishlistItemsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestWishlistItemsRequestAttributes'
        RestWishlistItemsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestWishlistItemsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestWishlistItemsIncluded'
        RestWishlistItemsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestWishlistItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestWishlistItemsRelationships'
        RestWishlistsAttributes:
            properties:
                name:
                    type: string
                numberOfItems:
                    type: integer
                createdAt:
                    type: string
                updatedAt:
                    type: string
        RestWishlistsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestWishlistsCollectionResponseData'
        RestWishlistsCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestWishlistsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestWishlistsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestWishlistsRequestData'
        RestWishlistsRequestAttributes:
            properties:
                name:
                    type: string
            required:
                - name
        RestWishlistsRequestData:
            properties:
                type:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestWishlistsRequestAttributes'
        RestWishlistsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestWishlistsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestWishlistsResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestWishlistsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        SapOrderSimulateV2DeliveryLine:
            properties:
                schedLine:
                    type: integer
                shipCond:
                    type: string
                status:
                    type: string
                qty:
                    type: integer
                date:
                    type: string
                time:
                    type: string
                reqDate:
                    type: string
                reqTime:
                    type: string
        Script:
            properties:
                url:
                    type: string
                queryParams:
                    type: array
                    items: {  }
        StoreCountryRestAttributes:
            properties:
                iso2Code:
                    type: string
                iso3Code:
                    type: string
                name:
                    type: string
                postalCodeMandatory:
                    type: boolean
                postalCodeRegex:
                    type: string
                regions:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreRegionRestAttributes'
        StoreCurrencyRestAttributes:
            properties:
                code:
                    type: string
                name:
                    type: string
        StoreLocaleRestAttributes:
            properties:
                code:
                    type: string
                name:
                    type: string
        StoreRegionRestAttributes:
            properties:
                iso2Code:
                    type: string
                name:
                    type: string
        StoresRestAttributes:
            properties:
                timeZone:
                    type: string
                defaultCurrency:
                    type: string
                currencies:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreCurrencyRestAttributes'
                locales:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreLocaleRestAttributes'
                countries:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreCountryRestAttributes'
        StoresRestCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoresRestCollectionResponseData'
        StoresRestCollectionResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/StoresRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        StoresRestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/StoresRestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        StoresRestResponseData:
            properties:
                type:
                    type: string
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/StoresRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
    parameters:
        acceptLanguage:
            name: Accept-Language
            in: header
            description: 'Locale value relevant for the store.'
            schema:
                type: string
            required: false
