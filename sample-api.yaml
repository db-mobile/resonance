openapi: 3.0.0
info:
  title: Task Management API
  description: A sample API for managing tasks and projects with user authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Projects
    description: Project management operations
  - name: Tasks
    description: Task management operations
  - name: Users
    description: User profile operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "johndoe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        createdAt:
          type: string
          format: date-time

    Project:
      type: object
      required:
        - id
        - name
        - ownerId
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Website Redesign"
        description:
          type: string
          example: "Redesign the company website with modern UI"
        ownerId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, completed, archived]
          default: active
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      required:
        - id
        - title
        - projectId
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Design homepage mockup"
        description:
          type: string
          example: "Create initial mockup for the new homepage design"
        projectId:
          type: string
          format: uuid
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
        status:
          type: string
          enum: [todo, in_progress, review, completed]
          default: todo
        dueDate:
          type: string
          format: date
        tags:
          type: array
          items:
            type: string
          example: ["design", "frontend"]
        metadata:
          type: object
          properties:
            estimatedHours:
              type: number
              example: 8
            actualHours:
              type: number
              example: 6.5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "SecurePass123!"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer
          example: 3600

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              error:
                type: string

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                username:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      tags:
        - Projects
      summary: List all projects
      description: Retrieve a list of all projects with optional filtering
      operationId: listProjects
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by project status
          schema:
            type: string
            enum: [active, completed, archived]
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      tags:
        - Projects
      summary: Create a new project
      description: Create a new project with the provided details
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [active, completed, archived]
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get project by ID
      description: Retrieve a specific project by its ID
      operationId: getProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Projects
      summary: Update project
      description: Update an existing project's details
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [active, completed, archived]
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete a project and all associated tasks
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully
        '404':
          description: Project not found

  /projects/{projectId}/tasks:
    get:
      tags:
        - Tasks
      summary: List project tasks
      description: Retrieve all tasks for a specific project
      operationId: listProjectTasks
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by task status
          schema:
            type: string
            enum: [todo, in_progress, review, completed]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task within a project
      operationId: createTask
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                description:
                  type: string
                assigneeId:
                  type: string
                  format: uuid
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                status:
                  type: string
                  enum: [todo, in_progress, review, completed]
                dueDate:
                  type: string
                  format: date
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      operationId: getTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    patch:
      tags:
        - Tasks
      summary: Partially update task
      description: Update specific fields of a task
      operationId: patchTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                assigneeId:
                  type: string
                  format: uuid
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                status:
                  type: string
                  enum: [todo, in_progress, review, completed]
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a specific task
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
